generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  username                String?   @unique
  hashedPassword          String?
  emailVerified           DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  projects                Project[] @relation("UserProjects")
  posts                   Post[]    @relation("UserPosts")
  comments                Comment[] @relation("UserComments")
  likes                   Like[]    @relation("UserLikes")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Project {
  id          String         @id @default(cuid())
  title       String
  description String
  postcode    String
  latitude    Float
  longitude   Float
  // imageUrls     String[] // Supabase image URLs
  author      User           @relation("UserProjects", fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  likes       Like[]
  images      ProjectImage[] @relation("ProjectImages")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProjectImage {
  id  String @id @default(cuid())
  url String // the public URL of the uploaded image

  project   Project  @relation("ProjectImages", fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([createdAt]) // For pagination
}

model Comment {
  id       String @id @default(cuid())
  content  String
  author   User   @relation("UserComments", fields: [authorId], references: [id])
  authorId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  likes Like[] // ‚Üê Now related back from Like

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())

  // Optional polymorphic relations:
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  user   User   @relation("UserLikes", fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@unique([projectId, userId])
  @@unique([commentId, userId])
  @@index([postId])
  @@index([projectId])
  @@index([commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
