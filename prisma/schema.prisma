// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WalletType {
  METAMASK
  COINBASE_WALLET
  TRUST_WALLET
}

model Wallet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  type    WalletType
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  withdrawalRequests WithdrawalRequest[]

  @@index([type, address])
}

enum UserRole {
  USER
  ADMIN
  AFFILIATE
  AMBASSADOR
  PARTNER
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String     @unique
  hashedPassword          String?
  emailVerified           DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  image                   String?
  twoFactorEnabled        Boolean    @default(false)
  twoFactorSecret         String?
  twoFactorBackupCodes    String[]
  referralCode            String     @unique
  tokens                  Float      @default(0)
  roles                   UserRole[] @default([USER])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts           Account[]
  openStakes         OpenStake[]
  lockedStakes       LockedStake[]
  referralsMade      Referral[]          @relation("UserReferrals")
  referralsReceived  Referral[]          @relation("UserReferred")
  withdrawalRequests WithdrawalRequest[]
  wallets            Wallet[]
  burns              Burn[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model StakingPackage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title            String
  description      String
  interestRate     Float
  lockDurationInMs Int?
  fixedAmount      Float?
  orderPosition    Int?
  defaultSelected  Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  openStakes   OpenStake[]
  lockedStakes LockedStake[]
}

model OpenStake {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  stakingPackageId String         @db.ObjectId
  stakingPackage   StakingPackage @relation(fields: [stakingPackageId], references: [id])

  amount   Float
  earnings Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LockedStake {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  stakingPackageId String         @db.ObjectId
  stakingPackage   StakingPackage @relation(fields: [stakingPackageId], references: [id])

  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referralRewards ReferralReward[]
}

enum BurnStatus {
  PENDING
  COMPLETE
}

model Burn {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  reward Float
  status BurnStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WithdrawalRequestStatus {
  PENDING
  COMPLETE
}

model WithdrawalRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  walletId String @db.ObjectId
  wallet   Wallet @relation(fields: [walletId], references: [id])

  amount          Float
  durationInMs    Int
  status          WithdrawalRequestStatus @default(PENDING)
  transactionHash String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation("UserReferred", fields: [userId], references: [id])

  referringUserId String @db.ObjectId
  referringUser   User   @relation("UserReferrals", fields: [referringUserId], references: [id])

  referralCodeUsed String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referralRewards ReferralReward[]

  @@unique([userId])
  @@index([referralCodeUsed])
}

model ReferralReward {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  referralId String   @db.ObjectId
  referral   Referral @relation(fields: [referralId], references: [id])

  lockedStakeId String      @db.ObjectId
  lockedStake   LockedStake @relation(fields: [lockedStakeId], references: [id])

  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ParentType {
  CONTACT_MESSAGE
  STANDALONE_MESSAGE
  AMBASSADOR_APPLICATION
  AFFILIATE_APPLICATION
  PARTNER_APPLICATION
}

model Thread {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  archived Boolean @default(false)

  parentId   String     @db.ObjectId
  parentType ParentType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([parentId, parentType])
}

model Message {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isInbound Boolean

  threadId String @db.ObjectId
  thread   Thread @relation(fields: [threadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StandaloneMessage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  from     String
  subject  String
  content  String
  archived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  questionType String
  message      String
  archived     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AmbassadorApplication {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String
  occupation     String
  company        String
  cryptoExp      String
  socialNetworks String[]
  motivation     String
  contribution   String
  projects       String
  events         String
  skills         String
  additional     String?
  questionType   String
  declaration    Boolean
  archived       Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AffiliateApplication {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  occupation    String
  company       String
  motivation    String
  promotionPlan String
  declaration   Boolean
  archived      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerApplication {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @db.String
  email       String  @db.String
  occupation  String  @db.String
  company     String  @db.String
  website     String  @db.String
  partnerType String
  description String  @db.String
  benefits    String  @db.String
  additional  String? @db.String
  declaration Boolean
  archived    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
