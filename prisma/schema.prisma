generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  username                String?   @unique
  hashedPassword          String?
  emailVerified           DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  image                   String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  roleId                  String?
  accounts                Account[]
  comments                Comment[] @relation("UserComments")
  likes                   Like[]    @relation("UserLikes")
  posts                   Post[]    @relation("UserPosts")
  projects                Project[] @relation("UserProjects")
  sessions                Session[]
  role                    Role?     @relation(fields: [roleId], references: [id])
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String
  postcode      String
  latitude      Float
  longitude     Float
  progress      Int            @default(0)
  status        ProjectStatus  @default(PROPOSED)
  progressNotes String?
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  author        User           @relation("UserProjects", fields: [authorId], references: [id])
  images        ProjectImage[] @relation("ProjectImages")
  categories    Category[]     @relation("ProjectCategories")
}

model Category {
  id       String    @id
  name     String    @unique
  icon     String
  projects Project[] @relation("ProjectCategories")
}

model ProjectImage {
  id        String   @id @default(cuid())
  url       String
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation("ProjectImages", fields: [projectId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  author    User      @relation("UserPosts", fields: [authorId], references: [id])

  @@index([createdAt])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  postId    String?
  projectId String?
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  post      Post?     @relation(fields: [postId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  likes     Like[]
}

model Like {
  id        String   @id @default(cuid())
  postId    String?
  projectId String?
  commentId String?
  userId    String
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([projectId, userId])
  @@unique([commentId, userId])
  @@index([postId])
  @@index([projectId])
  @@index([commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Role {
  id    String @id
  name  String @unique
  icon  String
  users User[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectStatus {
  PROPOSED
  IN_PROGRESS
  COMPLETED
  REJECTED
}
